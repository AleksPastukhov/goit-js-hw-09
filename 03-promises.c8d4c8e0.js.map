{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGcC,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBAC1BD,SAASC,cAAc,mBAGjC,IAAuBC,EAAUC,GAAVD,EAeT,EAfmBC,EAehB,KAdV,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE7BA,EAAM,KAKPQ,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAAd,GAASe,OAAOC,QAAQ,uBAAqBZ,QAAiBC,MAAU,IAEzEY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBS,EAAAd,GAASe,OAAOG,QAAQ,sBAAoBd,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n}\n\nfunction createPromise(position, delay) {\nreturn new Promise((resolve, reject)=>{\n  const shouldResolve = Math.random() > 0.3;\n  setTimeout(()=>{\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay })\n    } else {\n      // Reject\n      reject({ position, delay })\n    }\n  },delay)\n})\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.c8d4c8e0.js.map"}