{"mappings":"iiBAAA,IAQuBA,EAAUC,EARjCC,EAAAC,EAAA,SAGcC,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBAC1BD,SAASC,cAAc,oBAGVL,EAeT,EAfmBC,EAehB,KAdV,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEP,WAAUC,UAGpBO,EAAO,CAAER,WAAUC,S,GAErBA,E,KAKDY,MAAK,SAAAC,G,IAAGd,EAAQc,EAARd,SAAUC,EAAKa,EAALb,MACjBc,EAAAb,GAASc,OAAOC,QAAQ,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M,IAEvEkB,OAAM,SAAAL,G,IAAGd,EAAQc,EAARd,SAAUC,EAAKa,EAALb,MAClBc,EAAAb,GAASc,OAAOI,QAAQ,sBAAqCF,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n}\n\nfunction createPromise(position, delay) {\nreturn new Promise((resolve, reject)=>{\n  const shouldResolve = Math.random() > 0.3;\n  setTimeout(()=>{\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay })\n    } else {\n      // Reject\n      reject({ position, delay })\n    }\n  },delay)\n})\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"],"names":["position","delay","$iU1Pc","parcelRequire","document","querySelector","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.e3db29f0.js.map"}